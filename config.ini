num_boards = 3 # 								limited to 3 by array initialisation in controller.py - can expand to max 4 with code update
is_master = True #
loop_time = 0.0295 #
board_3 = [14] #
two_i2c_boards = True #
core_id = 0 #
int_lights = [[1,2],[1,4],[2,2],[2,6]] # A list of lights that hold the RPI off after a power cycle. It will be attempted to power these off before shutdown by the "turn_off_int_lights" script.
destIP = 192.168.28.251 #
destUDP = 52345 #
destIP2 = 192.168.28.252 #
destUDP2 = 52347 #
wd_powercycle = 5 # the mux channel the powercycle io expander is on
transfer_status = [[-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1]] # transfer status to other board
indicator_type = [[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0]] # 	0 = normal, 1 = socket indicator
indicator_mapping = [[[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7]],[[1,0],[2,6],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]],[[2,0],[2,1],[2,2],[2,3],[2,4],[2,5],[1,1],[2,7]]] #
zone_indicators = [[0,0],[0,1],[0,2],[1,0],[1,1],[1,4],[1,5],[1,6],[1,7],[2,0],[2,1],[2,4],[2,5]] #
bedroom_indicators = [] #
dimmer_en = [1,1,1,1,1,1,1] # dimming enabled - just operates as switch otherwise
dimmer_switch = [[2,1],[2,3],[2,7],[1,0],[0,0],[1,1],[1,5]] # 					switch dimmer is paired with
dimmer_mux = [8,10,11,12,15,13,14] #                                                        i2c mux channel dimmer module is on
dim_profile = [3,1,6,3,6,2,2] # 						0 = incandescent, 1 = IKEA LED edison bulb, 2 = IKEA/Osram Recessed LED, 3 = Philips GU10, else = linear
up_down_speed = [[10,5],[10,5],[5,1],[5,1],[2,2],[2,1],[2,1]] # 	in % per loop
tempmux = [14,13,3] # can use -1 to disable
air_quality = [[13,1]] #
IOmux = [8,12,14,15,1,3] #
PIRsens = [[4,0],[1,1],[1,2],[1,3],[0,1]] #
night_lights = [[0,0,0,4,0,-1,0,100,1,0,-1,600,0],[1,1,0,0,4,4,0,70,0,0,3,1800,1],[2,1,1,0,3,-1,0,50,0,1,-1,600,1],[4,0,2,2,0,-1,0,100,0,0,-1,1200,1],[3,0,0,2,0,-1,1,100,1,0,-1,600,1]] # PIR sensor num, Switch(0) or Dimmer(1), NightLight brd num, NightLight ch num, NightLight dimmer num, Secondary PIR, Daylight Operation, Dimmer Brightness, don't pause timer when main turned on, disabled when gone to bed, tertiary PIR, nightlight on time
night_light_main_lights = [[[1,7],[4,0]],[[1,7]],[[2,6],[2,7],[1,1]],[[2,0],[2,1],[2,3],[2,2]],[[0,2]]] #
led_strips = [D0:73:D5:42:12:E8,D0:73:D5:43:F1:B9,D0:73:D5:42:08:99,D0:73:D5:43:B4:9E] # ,D0:73:D5:40:BB:02] #
led_ip = [192.168.28.236,192.168.28.237,192.168.28.238,192.168.28.239] #
num_zones = [31,7,31,7] # n-1
led_strip_not_in_bedroom = [True,True,True,True] # doorbell doesn't flash led strips in bedroom at night
led_strip_dnd_suppress_allowed = [True,True,False,False] # led strip still flashes if DND_suppress turned on
led_strip_confirm = [True,True,True,True] # Check that LED pwr is set correctly ~15 seconds after setting it
SceneButton = [[0,0],[1,0],[2,0],[3,0]] # IO expander number, GPIO number on IO expander ---kitchen, sitting, dining, hall
ReorderSceneNight = [[1,0,2,1,0],[1,0,2,1,1],[1,0,2,1,1],[0,-1,-1,-1,0]] # 0: enable reorder, 1,2,3: new order, 4: happen a night, not only after 9pm
lights_under_button_control = [[[0,2,0],[1,0],[1,1],[2,0],[2,1]],[[0,2,6],[1,3],[1,2],[1,5],[2,3]],[[0,1,4],[1,6],[2,2],[0,0,7]],[[0,1,7],[1,4]]] # first param: 0=switch light, 1=dimmer, 2=led strip, following params: switch board/channel num, dimmer/led strip number
lights_button_off = [[[0,2,0],[1,0],[1,1],[2,0],[2,1],[0,2,2]],[[0,2,6],[1,3],[1,2],[1,5],[2,3]],[[0,1,4],[1,6],[2,2],[0,0,7]],[[0,1,7],[1,4]]] #
button_scene_0 = [[[1],[1,100],[0,100],[1,100,188,58],[1,100,188,58]],[[1],[1,100],[0,100],[1,100],[1,69,284,100]],[[1],[1,100],[1,40,240,58],[0]],[[1],[1,100]]] # first param: on/off, following params: brightness, hue, sat
button_scene_1 = [[[0],[1,100],[1,50],[1,29,240,58],[1,29,240,58]],[[0],[1,75],[1,100],[1,100],[1,55,284,100]],[[0],[1,100],[1,24,240,58],[1]],[[0],[1,100]]] #
button_scene_2 = [[[0],[1,60],[1,25],[1,24,240,58],[1,24,240,58]],[[0],[1,50],[1,100],[1,30],[1,65,160,44]],[[0],[1,30],[1,50,154,100],[1]],[[0],[1,60]]] #
button_led_ind = [[2,1],[1,0],[1,5],[0,0]] # board/channel number for indicator control
special_button = [] #
toggle_button = [[2,1]] #
access_points = [192.168.28.248] #
fan = [2,7] # fan connected to LED output on board 2 ch 7
fan_temps = [50,60] # temps that fan will change between 3 speed levels
fan_hyst = 9 # +/-degC
firealarm = [3,3] #
doorbell = [3,2] #
doorbell_ip_adr = 192.168.28.234 #
security_lights = [[3,1,0,1,0,-1,-1,400,-1,0],[2,2,3,0,1,2,4,400,800,1],[2,3,3,1,1,1,6,400,1200,1],[5,0,0,6,0,-1,-1,400,-1,0]] # io_exp_no, io_channel, board, brd_channel, bypass arm_security_lights, backup light if bypassed
fire_lights = [[1,7],[0,4],[0,1]] #
garage_control = True #
garage_io = [[5,1],[5,2],[5,3]] #
blinds = [1,0] #
blinds_to_close = [1,23,24,0] # temp sensor, mid limit, close limit, blinds
shower_blinds = [] #
extractor = [0,3,0,2,0,22,24,1] # fan_brd, fan_ch, light_brd, light_ch, inactive_when_in_bed, time before extractor comes on, short time, not_gated_by_extractor_en
post_box = [] # i2c mux channel, offset from start of MCP23008, channel number of RF600D
socket = [[2,5],[1,2],[1,3]] # [brd_no,chan_no] - kettle, sitting room, outdoor front
[END]
